Pilares Programacion Orientada a Objetos
*Abstracción
  Es la funcionalidad que permite al usuario/desarrollador abstraerse de la composicion o estructura de una clase, es decir que no necesariamente sepa como esta estructurada una clase internamente simplemente se utiliza.
  El proceso de abstracción consiste en definir atributos y metodos de una clase para ponerlos a disposicion de nuevos usuarios/desarrolladores.

*Encapsulación
  Proteger los atributos o metodos de una clase con la finalidad de evitar modificaciones erroneas o no intencionales.
  La encapsulacion se logra definiendo los atributos como privados y creando metodos publicos para acceder o asignar sus valores, por estandar estos metodos se conocen como sets y gets.

  Modificadores de acceso:
  -public: Permite el acceso a una clase, atributo o metodo desde cualquier lugar del proyecto.
  -default: Modificador de acceso por defecto, es el que no se escribe, es similar a public, la unica diferencia es que los atributos/metodos con este modificador no son visibles desde otros paquetes.
  -protected: Es similar al modificar private, con la diferencia que los atributos y metodos protected pueden ser visibles desde clases hijas.
  -private: Permite el acceso de un atributo o metodo unicamente desde la misma clase o desde metodos propios de la clase.



*Herencia
  Funcionalidad que permite crear una clase a partir de otra, de tal forma que esta nueva clase hereda los atributos y metodos de la clase base. Una de las principales ventajas de la herencia es la reutilizacion de codigo.
  
  Para aplicar herencia se utiliza extends(Java y PHP) despues del nombre de la clase hija y luego el nombre de la clase padre.
  En java,PHP no se puede heredar de multiples clases.

  Desde una clase hija, obligatoriamente se tiene que llamar al constructor de la clase padre, en caso de que la clase padre tenga un constructor vacio este se llamara automaticamente. Para hacer el llamado al constructor de la clase padre se utiliza la instruccion super. Tambien se puede utilizar super para llamar cualquier metodo o atributo de la clase padre.

  Sobreescritura de metodos:
  Funcionalidad que permite volver a escribir en la clase hija un metodo que estaba previamente definido en una clase padre, de tal forma que su funcionalidad puede ser completamente diferente. 

  Clases abstractas (no tiene mucho que ver con abstracción):
  Es una clase que se utiliza como molde o estructara base para ser utilizada en herencia

  abstract: Resumen
  Caracteristicas:
  *Usualmente se utiliza para clases padre.
  *Se utiliza la palabra reservada abstract para definir una clase como abstracta.
  *No se puede instanciar, sin embargo pueden tener un constructor.
  *Si se define un metodo abstracto la clase debe ser abstracta.
  *Puede definirse una clase abstracta que no tenga ningun metodo abstracto.
  *Si se define un metodo como abstract, este metodo no tiene cuerpo, solo se declara.
  *Todo metodo abstracto se debe implementar(sobreescribirse) obligatoriamente en las clases hijas.



Polimorfismo (Poli: Muchos, morfismo: formas)
  Misma apariencia diferente forma o funcionalidad.

  Sobreescritura de metodos: Es volver a escribir un metodo en la clase hija que previamente estaba definido en la clase padre, con la salvedad de que puede tener un comportamiento completamente diferente.
  En Java se suele agregar la etiqueta @Override para indicar que se esta sobreescribiendo un metodo.

  En Java y en PHP para identificar si un objeto es una instancia de una clase especifica se utiliza el operador logico instanceof

  Java objeto instanceof Clase
  PHP  $objeto instanceof Clase

  Ejemplos de polimorfismo:
    Sobreescritura de metodos
    Sobrecarga de metodos.
    Compatibilidad de clases:
        -Cast entre clases padres e hijas
        -Agregar elementos a una coleccion con un rawtype de una clase Padre
    Java: Crear objetos de clases padres utilizando constructores de clases hijas, al final las instancias son del tipo de la clase hija.


Clase POJO o Java Bean: Plain Old Java Object
  -Es una clase con sus atributos encapsulados, es decir con
  modificador private y metodos sets y gets.
  -Que tenga un constructor para inicializar los atributos de la clase.
  -Un constructor vacio
  -El metodo toString()

Constructores:
-Son metodos especiales que usualmente se utilizan para inicializar un objeto.
Caracteristicas:
  *Es el primer metodo en ejecutarse al momento de instanciar una clase.
  *Obligatoriamente debe ser public.
  *Debe llevar exactamente el mismo nombre de la clase.
  *No tiene tipo de dato de retorno, inclusive void.
  *Si no se define un constructor Java creara uno vacio por defecto.
  *Puede llevar o no parametros.
  *Un constructor puede sobrecargarse


Sobrecarga de Metodos:
-Es definir o crear metodos con el mismo nombre pero que difieren por la cantidad o tipos de parametros.


Colecciones:
Son clases especiales que permiten gestionar multiples objetos, suelen ser muy similares a los arreglos convencionales.

Ejemplos:
*ArrayList
*HashMap
*HashTable
*LinkedList
*Vector
*ObservableList

RawType (Receptáculo): es un tipo de dato referenciado que se suele indicar en ciertas clases al momento de declararlas e instanciarlas, por ejemplo en las colecciones. Los rawtypes deben ir entre los simbolos <> y en medio el nombre de la clase.
Ejemplo:
  <NombreClase>
  <String>

Modificador static:
Los atributos o metodos con este modificador permiten que puedan ser accedidos a ellos sin necesidad de crear instancias u objetos. Por lo general son publicos.
Un atributo static mantiene el mismo valor para todas las instancias.


Composición
Es utilizar en un atributo de una clase un tipo de dato previamente definido, es decir otra clase.
